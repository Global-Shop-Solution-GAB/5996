Program.Sub.Preflight.Start
Program.Sub.Preflight.End

Program.Sub.Main.Start
f.Intrinsic.Control.Try
'Try something
	Function.Intrinsic.UI.UsePixels ' Allows you to use Pixels instead of Twips throughout
	f.Intrinsic.Control.SelectCase(v.Caller.Hook)
		f.Intrinsic.Control.Case("54710")
			f.Intrinsic.Control.CallSub(getTable)
	f.Intrinsic.Control.EndSelect
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.ErrorMsg.Start
v.Local.sError.Declare

'Closes ODBC connection, default to connection : "con"
f.Intrinsic.Control.If(v.ODBC!con.State, =, 1)
	f.ODBC.Connection!con.Close
f.Intrinsic.Control.EndIf

'Generic Error message.
f.Intrinsic.String.Build("Project ProjectName.g2u {0}{0}Subroutine: {1}{0}Error: {2} with Description: {3}", v.Ambient.NewLine, v.Args.CurrentSub, v.Ambient.ErrorNumber, v.Ambient.ErrorDescription, v.Local.sError)
f.Intrinsic.UI.Msgbox(v.Local.sError)
Program.Sub.ErrorMsg.End

Program.Sub.getTable.Start
v.Local.iCnt.Declare
v.Local.sEmployee.Declare
v.Local.sTemp.Declare
v.Local.sDateCYDM.Declare
v.Local.dWP_Date.Declare
'v.Local.sHours.Declare
v.Local.iHours.Declare
v.Local.iMinutes.Declare

v.Local.iWeekDay.Declare

v.Local.sShift.Declare
v.Local.sBalance.Declare
v.Local.sDept.Declare
v.Local.sDay_Hours.Declare

v.Local.sFilter.Declare

v.Local.sStrHours.Declare
v.Local.iD_Hours.Declare
v.Local.iD_Min.Declare

v.Local.bOT.Declare

v.Local.dTime1.Declare
v.Local.dTime2.Declare

v.Local.fRet.Declare


v.Local.iTotalMinutesWorked.Declare
v.Local.iTotalMinutesShift.Declare

v.Local.fUploadTime.Declare
v.Local.sSQL.Declare
v.Local.sRuntime.Declare
f.Intrinsic.Control.Try
	Function.Intrinsic.Debug.InvokeDebugger
	Function.Intrinsic.Debug.Stop
	
'	f.Intrinsic.Date.ConvertTString("1545", "HH:NN", v.Local.dTime1)
'	f.Intrinsic.Date.ConvertTString("2330", "HH:NN", v.Local.dTime2)

	
	f.Intrinsic.Date.DateDiff("N", v.Local.dTime1, v.Local.dTime2, v.Local.fRet)
	Function.Intrinsic.Debug.Stop
	'Pull Overtime Datatable
	f.ODBC.Connection!con.OpenCompanyConnection
		f.Data.Datatable.CreateFromSQL("overtimeDT", "con", "select * from V_OVERTIME_CALC where employee <> '00000';")
		f.Data.Datatable.CreateFromSQL("lunchDT", "con", "select * from LUNCH_SHIFT;")
		
		f.Data.Dictionary.CreateFromSQL("shiftDict", "con", "select Employee, Shift from V_EMPLOYEE_MSTR;")
		f.Data.Dictionary.CreateFromSQL("balanceDict", "con", "select Employee, PR_Balance_Group from V_EMPLOYEE_MSTR;")
		f.Data.Dictionary.CreateFromSQL("deptDict", "con", "select Employee, Dept_Employee from V_EMPLOYEE_MSTR;")
		'f.Data.Dictionary.CreateFromSQL("shiftDict", "con", "select Employee, Shift from V_EMPLOYEE_MSTR;")
	f.ODBC.Connection!con.Close	
	
	'Create Datatable for weekdays.
	f.Data.Datatable.Create("weekDaysDT", True)
	f.Data.Datatable.AddColumn("weekDaysDT", "dbNameCol", "String")
	
	f.Data.Datatable.AddRow("weekDaysDT", "dbNameCol", "noData")
	f.Data.Datatable.AddRow("weekDaysDT", "dbNameCol", "HRS_MON")
	f.Data.Datatable.AddRow("weekDaysDT", "dbNameCol", "HRS_TUE")
	f.Data.Datatable.AddRow("weekDaysDT", "dbNameCol", "HRS_WED")
	f.Data.Datatable.AddRow("weekDaysDT", "dbNameCol", "HRS_THR")
	f.Data.Datatable.AddRow("weekDaysDT", "dbNameCol", "HRS_FRI")
	f.Data.Datatable.AddRow("weekDaysDT", "dbNameCol", "HRS_SAT")
	f.Data.Datatable.AddRow("weekDaysDT", "dbNameCol", "HRS_SUN")
	
	'Create Dataviews
	f.Data.DataView.Create("overtimeDT", "overtimeDV", 22)
	f.Data.DataView.Create("lunchDT", "lunchDV", 22)
	
	'Apply dictionaries
	f.Data.Datatable.AddColumn("overtimeDT", "shift", "String")
	f.Data.Dictionary.SetDefaultReturn("shiftDict", " ")
	f.Data.Datatable.FillFromDictionary("overtimeDT", "shiftDict", "employee", "shift")
	f.Data.Dictionary.Close("shiftDict")
	
	f.Data.Datatable.AddColumn("overtimeDT", "balance", "String")
	f.Data.Dictionary.SetDefaultReturn("balanceDict", " ")
	f.Data.Datatable.FillFromDictionary("overtimeDT", "balanceDict", "employee", "balance")
	f.Data.Dictionary.Close("balanceDict")
	
	f.Data.Datatable.AddColumn("overtimeDT", "dept", "String")
	f.Data.Dictionary.SetDefaultReturn("deptDict", " ")
	f.Data.Datatable.FillFromDictionary("overtimeDT", "deptDict", "employee", "dept")
	f.Data.Dictionary.Close("deptDict")
	
	'Loop
	f.Intrinsic.Control.For(v.Local.iCnt, 0, v.DataTable.overtimeDT.RowCount--, 1)
		v.Local.sEmployee.Set(v.DataTable.overtimeDT(v.Local.iCnt).Employee!FieldValTrim)
		v.Local.sShift.Set(v.DataTable.overtimeDT(v.Local.iCnt).shift!FieldValTrim)
		v.Local.sBalance.Set(v.DataTable.overtimeDT(v.Local.iCnt).balance!FieldValTrim)
		v.Local.sDept.Set(v.DataTable.overtimeDT(v.Local.iCnt).dept!FieldValTrim)
		
		v.Local.sDateCYDM.Set(v.DataTable.overtimeDT(v.Local.iCnt).WP_Date!FieldValTrim)		
		f.Intrinsic.Date.ConvertDString(v.Local.sDateCYDM, "YYYYMMDD", v.Local.dWP_Date)
		
		v.Local.sTemp.Set(v.DataTable.overtimeDT(v.Local.iCnt).Hours!FieldValTrim)
		f.Intrinsic.String.Split(v.Local.sTemp, ".", v.Local.sTemp)
		'Get Hours Worked.
		v.Local.iHours.Set(v.Local.sTemp(0))
		v.Local.iMinutes.Set(v.Local.sTemp(1))
		f.Intrinsic.Math.Mult(v.Local.iHours, 60, v.Local.iTotalMinutesWorked)
		f.Intrinsic.Math.Add(v.Local.iTotalMinutesWorked, v.Local.iMinutes, v.Local.iTotalMinutesWorked)
		'Get Day of the week from the date is running.
		f.Intrinsic.Date.Weekday(v.Local.dWP_Date, v.Local.iWeekDay)
		'Get the single shift, dept and shift_group.
		f.Intrinsic.String.Build("Shift = '{0}' and Dept = '{1}' and Shift_Group = '{2}'", v.Local.sShift.Trim, v.Local.sDept, v.Local.sBalance.Trim, v.Local.sFilter)
		f.Data.DataView.SetFilter("lunchDT", "lunchDV", v.Local.sFilter)
		Function.Intrinsic.Debug.Stop
		
		f.Intrinsic.Control.If(v.DataView.lunchDT!lunchDV.RowCount, =, 1)
			'Get The PYRL_LABOR Fields
			f.ODBC.Connection!con.OpenCompanyConnection
				f.Intrinsic.String.Build("Select top 1 run_time from PYRL_LABOR_XFER where Employee = '{0}' and run_cymd = '{1}' order by run_time desc", v.Local.sEmployee, v.Local.sDateCYDM, v.Local.sSQL)
				f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL, v.Local.sRunTime)
				
				f.Intrinsic.String.Build("Select * from PYRL_LABOR_XFER where Employee = '{0}' and run_cymd = '{1}' and Run_time = '{2}'", v.Local.sEmployee, v.Local.sDateCYDM, v.Local.sRuntime, v.Local.sSQL)
				f.Data.Datatable.CreateFromSQL("tmpUplDT", "con", v.Local.sSQL)
				f.Data.DataView.Create("tmpUplDT", "tmpUplDV", 22)
			f.ODBC.Connection!con.Close

			f.Intrinsic.Control.If(v.DataTable.tmpUplDT.RowCount, >, 0)			
				'Get Day Field.
				v.Local.sDay_Hours.Set(v.DataTable.weekDaysDT(v.Local.iWeekDay).dbNameCol!FieldValTrim)
				v.Local.sStrHours.Set(v.DataView.lunchDT!lunchDV(0).[v.Local.sDay_Hours.Trim]!FieldValTrim)
				
				f.Intrinsic.String.LPad(v.Local.sStrHours, "0", 4, v.Local.sStrHours)
				'Get Hours from Military
				f.Intrinsic.String.Left(v.Local.sStrHours, 2, v.Local.iD_Hours)			
				'Get Mins from Military
				f.Intrinsic.String.Right(v.Local.sStrHours, 2, v.Local.iD_Min)
				
				f.Intrinsic.Math.Mult(v.Local.iD_Hours, 60, v.Local.iTotalMinutesShift)
				f.Intrinsic.Math.Add(v.Local.iTotalMinutesShift, v.Local.iD_Min, v.Local.iTotalMinutesShift)
				Function.Intrinsic.Debug.Stop	
				f.Intrinsic.Date.ConvertTString(v.Local.sStrHours, "HH:NN", v.Local.dTime1)
				f.Intrinsic.Date.ConvertTString("0830", "HH:NN", v.Local.dTime2)
		
				'OT Majority
				f.Intrinsic.String.IsInString(v.Local.sBalance, "OT", False, v.Local.bOT)
				'Check OT in the Balance Group
				f.Intrinsic.Control.If(v.Local.bOT)
					'Set all time to 0, first row is either DT or OT
					f.Data.Datatable.SetValue("tmpUplDT", -1, "Hours", 0)	
					'Get the time to upload
					f.Intrinsic.Math.Div(v.Local.iTotalMinutesWorked, 60, v.Local.fUploadTime)
					f.Intrinsic.Math.Round(v.Local.fUploadTime, 2, v.Local.fUploadTime)
					'Check if the day is sunday (7)
					f.Intrinsic.Control.If(v.Local.iWeekDay, =, 7)
						f.Data.Datatable.SetValue("tmpUplDT", 0, "Hours", v.Local.fUploadTime, "DT", " 3-Double Time")	
					f.Intrinsic.Control.Else
						f.Data.Datatable.SetValue("tmpUplDT", 0, "Hours", v.Local.fUploadTime, "OT", " 2-Overtime")	
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.Else
					'Get overtime for Balance Group not OT.
					f.Intrinsic.Control.If(v.Local.iTotalMinutesWorked, >, v.Local.iTotalMinutesShift)
						'Get upload Regular Time 
						f.Intrinsic.Math.Div(v.Local.iTotalMinutesShift, 60, v.Local.fUploadTime)
						f.Intrinsic.Math.Round(v.Local.fUploadTime, 2, v.Local.fUploadTime)
						'Filter RT
						f.Data.DataView.SetFilter("tmpUplDT", "tmpUplDV", "Type = 'RT'")
						'Change Value
						f.Intrinsic.Control.If(v.DataView.tmpUplDT!tmpUplDV.RowCount, =, 1)
							f.Data.DataView.SetValue("tmpUplDT", "tmpUplDV", 0, "Hours", v.Local.fUploadTime)
						f.Intrinsic.Control.EndIf
						'Get upload Overtime
						f.Intrinsic.Math.Sub(v.Local.iTotalMinutesWorked, v.Local.iTotalMinutesShift, v.Local.iTotalMinutesWorked)
						f.Intrinsic.Math.Div(v.Local.iTotalMinutesWorked, 60, v.Local.fUploadTime)
						f.Intrinsic.Math.Round(v.Local.fUploadTime, 2, v.Local.fUploadTime)
						'Filter RT
						f.Data.DataView.SetFilter("tmpUplDT", "tmpUplDV", "Type = 'OT'")
						'Change Value
						f.Intrinsic.Control.If(v.DataView.tmpUplDT!tmpUplDV.RowCount, =, 1)
							f.Data.DataView.SetValue("tmpUplDT", "tmpUplDV", 0, "Hours", v.Local.fUploadTime)
						f.Intrinsic.Control.EndIf	
					'End If total worked hours greater than shift
					f.Intrinsic.Control.EndIf				
				'End If if Balance Group contains "OT"
				f.Intrinsic.Control.EndIf
				' Save the Table Back.
				f.Data.Datatable.AcceptChanges("tmpUplDT")
				f.ODBC.Connection!con.OpenCompanyConnection
					f.Data.Datatable.SaveToDB("tmpUplDT", "con", "PYRL_LABOR_XFER", "EMPLOYEE*!*RUN_CYMD*!*RUN_TIME*!*SEQ", 256)
				f.ODBC.Connection!con.Close
			'End If Check TmpUplDT count > 0
			f.Intrinsic.Control.EndIf	
			'Close tmp DV and DT
			f.Data.DataView.Close("tmpUplDT", "tmpUplDV")
			f.Data.Datatable.Close("tmpUplDT")
		'End If, shift data.	
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(ErrorMsg, CurrentSub, v.Ambient.CurrentSubroutine)
f.Intrinsic.Control.EndTry
Program.Sub.getTable.End

Program.Sub.Comments.Start
${$5$}$3.0.0.0$}$1
${$6$}$aanazco$}$20200709162153926$}$7aQAV3Tor/tR9bkuakHbuzQlHVuXCGOzmBTDVYFE6d1cd9hOgeoeoMGpkPBdWNfU9W/JkkqfrBg=
Program.Sub.Comments.End